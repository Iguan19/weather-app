{"version":3,"sources":["Components/Preview/initialIcon.png","Components/Header/Header.js","Elements/InputField/InputField.js","Elements/Button/Button.js","Components/SearchBox/SearchBox.js","Components/Footer/Footer.js","Components/WeatherDetailsCard/WeatherDetailsCard.js","Components/ErrorNotice/ErrorNotice.js","Components/Preview/Preview.js","Containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","title","Inputfield","handleChange","type","placeholder","onChange","value","Button","props","name","position","onClick","handleClick","SearchBox","onChangeHandler","onClickHandler","Footer","now","Date","WeatherDetailsCard","src","data","icon","alt","city","Math","round","temperature","description","dateFormat","errorNotice","Preview","App","searchBarHandler","e","setState","searchBarInput","target","tryAgainHandler","weatherDetails","error","onSubmit","fetch","state","process","then","res","json","cod","main","temp","weather","catch","err","console","log","cardContent","this","ErrorNotice","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f1c8e3dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/initialIcon.a085693a.png\";","import React from 'react';\nimport './Header.scss';\n\nconst Header = () => {\n  return (\n      <div className=\"header\">\n        <nav className=\"headerNav\">\n          <a className=\"link\" href=\"https://iguan19.github.io/weather-app/\" title=\"Home\">Weather APP</a>\n        </nav>\n      </div>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport './InputField.scss';\n\nconst Inputfield = ({ handleChange }) => {\n\treturn (\n    <div className='inputField'>\n      <input \n        className='input' \n        type='search' \n        placeholder='Enter City'\n        onChange={ handleChange }\n        value = { handleChange.value }\n      />\n    </div>\n  );\n}\n\nexport default Inputfield;\n","import React from 'react';\nimport './Button.scss';\n\nconst Button = (props) => {\n\treturn(\n\t\t<div>\n  \t\t<button \n  \t\tclassName=\"button\" \n  \t\tname=\"searchSubmit\" \n      type=\"submit\" \n      position=\"onForm\"\n      onClick={ props.handleClick }\n  \t\t>\n  \t\tSet\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default Button;\n","import React from 'react';\n\nimport InputField from '../../Elements/InputField/InputField';\nimport Button from '../../Elements/Button/Button';\nimport './SearchBox.scss';\n\nconst SearchBox = (props) => {\n\treturn(\n\t\t<div className=\"searchbox\">\n\t\t\t<InputField \n\t\t\t\thandleChange = { props.onChangeHandler }\n\t\t\t\tvalue = { props.onChangeHandler.value }\n\t\t\t/>\n\t\t\t<Button \n\t\t\t\thandleClick = { props.onClickHandler }\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Footer.scss';\n\nconst Footer = () => {\n  return (\n      <div className=\"footer\">\n        <nav className=\"footerNav\">\n          <a className=\"link\" href=\"https://github.com/Iguan19\" title=\"GitHub\">Created by Francisco Egea</a>\n        </nav>\n      </div>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport dateFormat from 'dateformat';\nimport './WeatherDetailsCard.scss';\n\nconst now = new Date();\n\nconst WeatherDetailsCard = (props) => {\n\treturn(\n\t\t<div className=\"card\">\n\t\t  <div>\n\t\t    <img \n\t\t    \tsrc={`http://openweathermap.org/img/wn/${props.data.icon}@2x.png`}\n\t\t    \tclassName=\"image\" \n\t\t    \ttitle=\"weather icon\" \n\t\t    \talt='Icon not available'\n\t\t    />\n\t\t  </div>\n\t\t  <div>\n\t\t  \t<div>\n\t\t\t\t\t<span className='city'>{props.data.city}</span>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<span className='temperature'>{Math.round(props.data.temperature)} °C</span>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<span className=\"description\">{props.data.description}</span>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"date\">\n\t\t\t\t\t{dateFormat(now, \"dddd, mmmm dS, yyyy, h:MM:ss TT\")}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default WeatherDetailsCard;","import React from 'react';\n\nconst errorNotice = (props) => {\n    return(\n        <div className=''>\n            <h1 className=''>404</h1>\n            <div className=''>\n                <h2 className=''>Oops!</h2>\n                <p className=''>We can't find the city you are looking for</p>\n            </div>\n        </div>\n    );\n}\n\nexport default errorNotice;","import React from 'react';\nimport dateFormat from 'dateformat';\nimport icon from './initialIcon.png';\nimport './Preview.scss';\n\nconst now = new Date();\n\nconst Preview = () => {\n\treturn(\n\t\t<div className=\"card\">\n\t\t  <div>\n\t\t    <img \n\t\t    \tsrc={icon}\n\t\t    \tclassName=\"image\" \n\t\t    \ttitle=\"weather icon\" \n\t\t    \talt='weather icon'\n\t\t    />\n\t\t  </div>\n\t\t  <div>\n\t\t  \t<div>\n\t\t\t\t\t<span className='city'>City</span>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<span className='temperature'>Temperature °C</span>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<span className=\"description\">Description available when a city is set</span>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"date\">\n\t\t\t\t\t{dateFormat(now, \"dddd, mmmm dS, yyyy, h:MM:ss TT\")}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Preview;","import React, { Component } from 'react';\nimport Header from '../../Components/Header/Header';\nimport SearchBox from '../../Components/SearchBox/SearchBox';\nimport Footer from '../../Components/Footer/Footer';\nimport WeatherDetailsCard from '../../Components/WeatherDetailsCard/WeatherDetailsCard';\nimport ErrorNotice from '../../Components/ErrorNotice/ErrorNotice';\nimport Preview from '../../Components/Preview/Preview';\nimport './App.css';\n\nconst APIKey = process.env.REACT_APP_API_KEY;\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      searchBarInput: '',\n      weatherDetails: {\n        temperature: '',\n        description: '??',\n        icon: ''\n      },\n      error: false,\n    }\n  }\n\n  searchBarHandler = (e) => {\n    this.setState({ searchBarInput: e.target.value });\n  }\n\n  tryAgainHandler = () => {\n    this.setState({\n      searchBarInput: '',\n      weatherDetails: {\n        temperature: '',\n        description: '??',\n        icon: '',\n        city: ''\n      },\n      error: false\n    })\n  }\n\n  onSubmit = () => {\n    this.setState({\n      weatherDetails: {},\n      error: false\n    });\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.searchBarInput}&appid=${APIKey}&units=metric`)\n      .then(res => res.json())\n      .then(data => {\n        if(data.cod === 200){\n          return this.setState({\n              weatherDetails: {\n                temperature: data.main.temp,\n                description: data.weather[0].main,\n                icon: data.weather[0].icon,\n                city: data.name\n              },\n            }\n          )\n        } else {\n          throw data.cod;\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n            error: true\n        });\n      })\n  }\n\n  render() {\n    let cardContent = <Preview />;\n    if (this.state.error) {\n      cardContent = <ErrorNotice onClickHandler={this.tryAgainHandler} />;\n    } else if (this.state.weatherDetails.temperature && this.state.weatherDetails.description !== '') {\n      cardContent = <WeatherDetailsCard data={this.state.weatherDetails} />;\n    }\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <SearchBox \n          onChangeHandler = { this.searchBarHandler } \n          onClickHandler = { this.onSubmit }\n        />\n        {cardContent}\n        <Footer />\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}